<?xml version="1.0" encoding="UTF-8"?>
 <!--configuration 包含的属性：
     debug 当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态，默认值为 false。
     scan 当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true。
     scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。但 scan 为 true 时，此属性生效，默认的时间间隔为 1 分钟-->
<configuration debug="true">

    <!--用springProperty来配置的话，可以直接读取properties文件-->
    <springProperty scope="context" name="LOG-DIR" source="log.dir"/>

    <!--用于定义键值对的变量， property 有两个属性 name 和 value，name 是键，value 是值，通过 property 定义的键值对会保存到logger 上下文的 map 集合内。定义变量后，可以使用 “${}” 来使用变量-->
    <!--<property name="LOG-DIR" value="/home/admin/logs"/>-->
    <property name="APP-NAME" value="coupon"/>
    <property name="LOG-PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] [%-5level] [%class:%line] - %m%n"/>

    <!--控制台日志组件，该组件将日志信息输出到控制台,该组件有以下节点：
        encoder：对日志进行格式化
        target：System.out 或者 System.err，默认是 System.out-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--<charset>UTF-8</charset>-->
            <pattern>${LOG-PATTERN}</pattern>
        </encoder>
    </appender>

    <!--日志文件-->
    <!-- 滚动记录文件日志组件，先将日志记录记录到指定文件，当符合某个条件时，将日志记录到其他文件，该组件有以下节点
         file：文件名
         encoder：格式化
         rollingPolicy：滚动策略，当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
         triggeringPolicy：告知 RollingFileAppender 何时激活滚动
         prudent：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。-->
    <appender name="FILE-ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--滚动策略
            （1）TimeBasedRollingPolicy：最常用的滚动策略，它根据时间来制定滚动策略，即负责滚动也负责触发滚动，包含节点：
                fileNamePattern：文件名模式
                maxHistoury：控制文件的最大数量，超过数量则删除旧文件
            （2）FixedWindowRollingPolicy：根据固定窗口算法重命名文件的滚动策略，包含节点
                minInedx：窗口索引最小值
                maxIndex：串口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12
                fileNamePattern：文件名模式，必须包含%i，命名模式为 log%i.log，会产生 log1.log，log2.log 这样的文件
            （3）triggeringPolicy：根据文件大小的滚动策略，包含节点
                maxFileSize：日志文件最大大小-->
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式,把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${LOG-DIR}/${APP-NAME}/${APP-NAME}-%d{yyyyMMdd}.log</FileNamePattern>
            <!--只保留最近10天的日志-->
            <maxHistory>10</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>
            <!--<charset>UTF-8</charset>-->
            <pattern>${LOG-PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- ERROR日志文件 -->
    <appender name="FILE-ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--filter过滤器：
            过滤器是用于日志组件中的，每经过一个过滤器都会返回一个确切的枚举值，分别是
                DENY：返回 DENY，日志将立即被抛弃不再经过其他过滤器
                NEUTRAL：有序列表的下个过滤器接着处理日志
                ACCEPT：日志会被立即处理，不再经过剩余过滤器
            常用过滤器：
            (1)LevelFilter 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据 omMatch 和 omMismatch 接受或拒绝日志。他有以下节点
　　             level：过滤级别
　　             onMatch：配置符合过滤条件的操作
　　             onMismatch：配置不符合过滤条件的操作
            (2)ThresholdFilter 临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器会返回 NEUTRAL；当日志级别低于临界值时，日志会被拒绝
            (3)EvaluatorFilter 求值过滤器，评估、鉴别日志是否符合指定条件，包含节点：
　　             evaluator：鉴别器，通过子标签 expression 配置求值条件
　　             onMatch：配置符合过滤条件的操作
　　             onMismatch：配置不符合过滤条件的操作-->
        <!--该组件设置一个 ERROR 级别的过滤器，那么所有非 ERROR 级别的日志都会被过滤掉　-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 ERROR-->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${LOG-DIR}/${APP-NAME}/${APP-NAME}-error-%d{yyyyMMdd}.log</FileNamePattern>
            <!--只保留最近10天的日志-->
            <maxHistory>10</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>
            <!--<charset>UTF-8</charset>-->
            <pattern>${LOG-PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 根logger，只有一个 level 属性 -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE-ALL"/>
        <appender-ref ref="FILE-ERROR"/>
    </root>

    <!-- logger 有两种级别，一种是 root，一种是普通的 logger，logger 是用来设置某一个包或者具体的某一个类的日志打印机级别，以及制定的 appender, 每个 logger 都有对应的父级关系，它通过包名来决定父级关系，root 是最高级的父元素。
         logger 有三个属性:
         name：用来指定此 logger 约束的某一个包或者具体的某一个类，标志该 logger 与哪个包或哪个类绑定
         level：用来设置打印机别，
         additivity：是否向上级 logger 传递打印信息。默认是 true
         向上传递的日志信息的日志级别将由最底层的子元素决定 -->
    <!--<logger name="com.wxiang.srb.core" level="DEBUG"/>-->
    <!--<logger name="com.wxiang.srb.core.controller" level="DEBUG"/>-->

</configuration>